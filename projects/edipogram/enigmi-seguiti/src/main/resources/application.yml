# application.yml 
--- 
spring:
  application:
    name: enigmi-seguiti
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 45s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false
  datasource:
    url: jdbc:postgresql://localhost:5440/enigmiseguitidb
    username: postgres
    password: postgres
  #main:
    #web-application-type: none
  jpa:
    hibernate:
      ddl-auto: create
      jdbc.lob.non_contextual_creation: true
      #database-platform: org.hibernate.dialect.PostgreSQL82Dialect
    show-sql: true
  kafka:
    bootstrap-servers: ${DOCKER_HOST_IP:localhost}:9092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      #group-id: ${asw.edipogram.enigmiseguiti.groupId}
      #auto-offset-reset: earliest
      #properties.spring.json.trusted.packages: asw.edipogram.enigmiseguiti.*
server:
  port: ${PORT:${SERVER_PORT:0}}
#  port: 8080

# fa il logging dei comandi sql eseguiti 
spring.jpa.show-sql: false

# disable OSIV
spring.jpa.open-in-view: false

asw:
  edipogram:
    enigmiseguiti:
      channel:
        in-enigma-created: enigma-created-service-event-channel
        in-connessione-created: connessione-created-service-event-channel
      groupId: enigmiseguiti

spring.kafka.consumer.properties.spring.json.trusted.packages: asw.edipogram.*
